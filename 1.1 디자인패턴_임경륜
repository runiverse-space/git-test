디자인 패턴: 규약 형태로 만들어 놓은 설계 패턴

### 1.1.1 싱글톤 패턴
싱글톤 패턴: 하나의 클래스에 하나의 인스턴스만 만든다.
주 사용처: 데이터 베이스 연결 모듈에 많이 사용- 데이터 베이스 연결 인스턴스 생성 비용을 아낄수 있음
단점: 의존성이 높아진다.

싱글톤 패턴 TDD의 걸림돌
하나의 인스턴스를 기반으로 하는 싱글톤에 독립적인 단위테스트는 불가

대체품 의존성 주입(Dependency Injection)
모듈간의 결합을 느슨하게 만든다. 
의존성 주입자가 메인 모듈이 하위 모델에게 간접적으로 의존성을 주입하도록 만든다.
메인 모듈은 하위 모듈에 대한 의존성이 떨어진다= 디커플링된다. 

의존성 주입의 원칙
상위 모듈, 하위 모듈은 모두 추상화에 의존하고, 추상화는 세부 사항에 의존하지 말아야 한다.

### 1.1.2 팩토리 패턴

객체를 사용하는 코드에서 객체 생성 부분을 떼어내서 추상화했다.
상위 클래스가 정의를 하고 하위 클래스가 상위 클래스가 정한 것을 구체화한다.(인스턴스 생성)

Enum : 상수의 집합을 정의할때 사용되는 타입

### 1.1.3 전략 패턴
객체의 행위를 바꿀때 캡슐화한 객체를 컨텍스트 내에서 교체하여, 상호 교환이 가능하게 만든 패턴이다.

예시) node.js 의 passport 
인증 모듈 구현 미들웨어 라이브러리
localstorage 전략과 oauth 전략을 지원하여 인증 모듈의 인증 방식을 상호 교환하여 사용하게 만들었다.

### 1.1.4 옵저버 패턴
옵저버 패턴(관찰자): 객체의 상태 변화를 관찰하다가 변화가 있을 때 옵저버들에게 변화를 알려준다.
자바의 옵저버: mvc 모델
모델에 변경-> update 메서드로 옵저버인 뷰에게 알려줌-> 컨트롤러가 작동

자바의 상속과 구현
상속(abstract 클래스를 기반): 자식 클래스가 자식의 메서드 + 부모의 메서드까지 확장하여 사용할수 있는 것
구현(인터페이스기반): 부모 클래스의 메서드를 자식이 그대로 안쓰고 재정의해서 사용하는것

#### 자바스크립트의 옵저버 패턴

##### 프록시 객체
프록시 객체: 대상의 기본적 동작 함수 호출, 순회 모든 것을 가로챌 수 있는 객체
반드시 필요한 매개 변수
Target: 프록시할 대상
handler:  target의 동작을 가로 채고 어떤 동작을 할건지 정해진 함수

### 1.1.5 프록시 패턴과 프록시 서버

프록시 패턴
대상 객체에 접근하기 전에 해당 접근을 필터링, 수정하는 계층의 디자인 패턴

어디에 사용?
객체의 속성, 변환을 보완하여 캐싱, 로깅에 사용

프록시 서버
프록시 서버: 클라이언트와 서버 사이의 매개 프로그램, 네트워크 서비스에 간접적으로 접속할 수 있게 해준다.

nginx
비동기 이벤트 기반의 구조와 다수의 연결을 처리하는 프록시 서버로 활용
nginx를 프록시 서버로 두면 좋은점: 실제 서버포트를 숨기고 메인 서버 앞단에서 로깅 가능

버퍼 오버플로우: 데이터가 저장되는 메모리 공간, 메모리 공간을 벗어난 경우-> 버퍼오버플로우 

cloudflare
시스템 콘텐츠를 빠르게 전달하는 프로그램 cdn 서비스
프록시 서버로 디도스 공격(짧은 시간 동안 네트워크에 많은 요청을 보내서 네트워크 마비, 가용성을 방해하는 공격 유형) 방어, 
https 구축(서버에서 https를 구축할 때 인증서를 기반으로 구축하나 cloudflare를 사용하면 인증서 설치 필요없음)에 쓰인다.

cors 프런트엔드의 프록시 서버
Cross-Origin resources sharing  서버가 웹 브라우저에서 리소스를 로드할때 다른
출처의 리소스를 로드 못하게 하는 http 헤더 기반 메커니즘
백엔드 서버와 프론트 서버의 경우 포트 번호가 다른데 cors 에러가 난다.
127.0.0.1 루프백(자신 pc의 ip)

### 1.1.6 이터레이터 패턴
이터레이터를 사용하여 컬렉션의 요소들에 접근하는 디자인 패턴

### 1.1.7 노출 모듈 패턴
즉시 실행 함수를 통해 private, public 같은 접근 제어자를 만드는 패턴
자바스크립트는 private, public 없어서 전역 스크립트가 실행된다.

### 1.1.8 mvc 패턴
모델
애플리케이션의 데이터 데이터 베이스, 상수, 변수를 의미


뷰
사용자 인터페이스 요소 , 사용자가 볼 수 있는 화면 
변경이 일어나면 컨트롤러에 전달하는 역할
컨트롤러
하나이상의 모델과 하나이상의 뷰를 이어주고 이벤트를 담당한다.

### 1.1.9 mvp
컨트롤러가 프레진터로 교체 mvc보다 강한 결합을 지닌 패턴

### mvvm 패턴
mvc의 c가 뷰모델로 바뀐 패턴
뷰: 
함수를 사용하지 않고 값 대입만으로도 변수가 변경되고 양방향 바인딩, html을 토대로 컨포넌트를 구축할수 있다.
